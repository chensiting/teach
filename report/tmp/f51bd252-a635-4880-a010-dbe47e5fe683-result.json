{"name": "列出课程用例", "status": "broken", "statusDetails": {"message": "json.decoder.JSONDecodeError: Invalid control character at: line 1 column 63 (char 62)", "trace": "self = <testCaseTeach.test_Lesson.TestLesson object at 0x04315C30>\ninData = '{\"action\":\"list_course\",\"pagenum\":\"-1\",\"pagesize\":\"20\"}'\nrepsData = '{\"retcode\": 500, \"reason\": \"Traceback (most recent call last):\\n  File \"G:\\\\SQ资料区\\\\松勤自动化课程\\\\Web-API课程\\\\安装文件\\\\restapi-...alized set the \\'\\nTypeError: In order to allow non-dict objects to be serialized set the safe parameter to False.\\n\"}'\n\n    @allure.story(\"列出课程\")\n    @allure.title(\"列出课程用例\")\n    @pytest.mark.lesson_list\n    @pytest.mark.parametrize('inData,repsData', get_excelData('2-课程模块', 27, 38, 6, 8))\n    def test_list_lesson(self,inData,repsData):\n        \"\"\"列出课程\"\"\"\n        res = LessonClass().listcourse(self.session,json.loads(inData))\n>       assert  json.loads(res)['retcode'] == json.loads(repsData)['retcode']#断言\n\ntest_Lesson.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ng:\\program files (x86)\\python36-32\\lib\\json\\__init__.py:354: in loads\n    return _default_decoder.decode(s)\ng:\\program files (x86)\\python36-32\\lib\\json\\decoder.py:339: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x03C45210>\ns = '{\"retcode\": 500, \"reason\": \"Traceback (most recent call last):\\n  File \"G:\\\\SQ资料区\\\\松勤自动化课程\\\\Web-API课程\\\\安装文件\\\\restapi-...alized set the \\'\\nTypeError: In order to allow non-dict objects to be serialized set the safe parameter to False.\\n\"}'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n>           obj, end = self.scan_once(s, idx)\nE           json.decoder.JSONDecodeError: Invalid control character at: line 1 column 63 (char 62)\n\ng:\\program files (x86)\\python36-32\\lib\\json\\decoder.py:355: JSONDecodeError"}, "description": "列出课程", "parameters": [{"name": "inData", "value": "'{\"action\":\"list_course\",\"pagenum\":\"-1\",\"pagesize\":\"20\"}'"}, {"name": "repsData", "value": "'{\"retcode\": 500, \"reason\": \"Traceback (most recent call last):\n  File \"G:\\SQ资料区\\松勤自动化课程\\Web-API课程\\安装文件\\restapi-teach\\backend\\lib\\common.py\", line 69, in dispatch\n    return handler(request, *args, **kwargs)\n  File \"G:\\SQ资料区\\松勤自动化课程\\Web-API课程\\安装文件\\restapi-teach\\backend\\apps\\mgr\\handlers\\mgr.py\", line 84, in handle_list_course\n    return JsonResponse(Course.list(pagenum,pagesize))\n  File \"E:\\Python3.6.4-Tool\\lib\\site-packages\\django\\http\\response.py\", line 503, in __init__\n    'In order to allow non-dict objects to be serialized set the '\nTypeError: In order to allow non-dict objects to be serialized set the safe parameter to False.\n\"}'"}], "start": 1605360725060, "stop": 1605360725064, "uuid": "c05bb9cd-8b20-4437-a6d4-cf8d3f4dfafa", "historyId": "a1f83fd715a064dc78647590b35ddad1", "testCaseId": "b5ec7941d656d6ab580d6272d6092c37", "fullName": "test_Lesson.TestLesson#test_list_lesson", "labels": [{"name": "feature", "value": "课程模块"}, {"name": "severity", "value": "normal"}, {"name": "story", "value": "列出课程"}, {"name": "tag", "value": "Lesson(order=2)"}, {"name": "tag", "value": "lesson_list"}, {"name": "suite", "value": "test_Lesson"}, {"name": "subSuite", "value": "TestLesson"}, {"name": "host", "value": "2Q7E3JCM2F8I91T"}, {"name": "thread", "value": "5724-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_Lesson"}]}