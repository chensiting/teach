{"name": "test_modify_lesson[{\"action\":\"modify_course\",\"id\":\"abc\",\"newdata\":\"{ \"name\":\"松勤\",\"desc\":\"心田老师课程\",\"display_idx\":\"5\"}\"\"\"}-{\"retcode\": 500, \"reason\": \"Traceback (most recent call last):\n  File \"G:\\SQ资料区\\松勤自动化课程\\Web-API课程\\安装文件\\restapi-teach\\backend\\lib\\common.py\", line 69, in dispatch\n    return handler(request, *args, **kwargs)\n  File \"G:\\SQ资料区\\松勤自动化课程\\Web-API课程\\安装文件\\restapi-teach\\backend\\apps\\mgr\\handlers\\mgr.py\", line 198, in handle_modify_course\n    return  JsonResponse(Course.modify(request.param_dict['id'],newData))\n  File \"G:\\SQ资料区\\松勤自动化课程\\Web-API课程\\安装文件\\restapi-teach\\backend\\services\\datamodel\\common\\models.py\", line 100, in modify\n    Course.objects.filter(id=rid)\\\n  File \"E:\\Python3.6.4-Tool\\lib\\site-packages\\django\\db\\models\\manager.py\", line 82, in manager_method\n    return getattr(self.get_queryset(), name)(*args, **kwargs)\n  File \"E:\\Python3.6.4-Tool\\lib\\site-packages\\django\\db\\models\\query.py\", line 836, in filter\n    return self._filter_or_exclude(False, *args, **kwargs)\n  File \"E:\\Python3.6.4-Tool\\lib\\site-packages\\django\\db\\models\\query.py\", line 854, in _filter_or_exclude\n    clone.query.add_q(Q(*args, **kwargs))\n  File \"E:\\Python3.6.4-Tool\\lib\\site-packages\\django\\db\\models\\sql\\query.py\", line 1253, in add_q\n    clause, _ = self._add_q(q_object, self.used_aliases)\n  File \"E:\\Python3.6.4-Tool\\lib\\site-packages\\django\\db\\models\\sql\\query.py\", line 1277, in _add_q\n    split_subq=split_subq,\n  File \"E:\\Python3.6.4-Tool\\lib\\site-packages\\django\\db\\models\\sql\\query.py\", line 1215, in build_filter\n    condition = self.build_lookup(lookups, col, value)\n  File \"E:\\Python3.6.4-Tool\\lib\\site-packages\\django\\db\\models\\sql\\query.py\", line 1085, in build_lookup\n    lookup = lookup_class(lhs, rhs)\n  File \"E:\\Python3.6.4-Tool\\lib\\site-packages\\django\\db\\models\\lookups.py\", line 18, in __init__\n    self.rhs = self.get_prep_lookup()\n  File \"E:\\Python3.6.4-Tool\\lib\\site-packages\\django\\db\\models\\lookups.py\", line 68, in get_prep_lookup\n    return self.lhs.output_field.get_prep_value(self.rhs)\n  File \"E:\\Python3.6.4-Tool\\lib\\site-packages\\django\\db\\models\\fields\\__init__.py\", line 947, in get_prep_value\n    return int(value)\nValueError: invalid literal for int() with base 10: 'abc'\n\"}\n]", "status": "broken", "statusDetails": {"message": "json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)", "trace": "self = <testCaseTeach.test_Lesson.TestLesson object at 0x04787130>\ninData = '{\"action\":\"modify_course\",\"id\":\"abc\",\"newdata\":\"{ \"name\":\"松勤\",\"desc\":\"心田老师课程\",\"display_idx\":\"5\"}\"\"\"}'\nrepsData = '{\"retcode\": 500, \"reason\": \"Traceback (most recent call last):\\n  File \"G:\\\\SQ资料区\\\\松勤自动化课程\\\\Web-API课程\\\\安装文件\\\\restapi-... line 947, in get_prep_value\\n    return int(value)\\nValueError: invalid literal for int() with base 10: \\'abc\\'\\n\"}\\n'\n\n    @pytest.mark.lesson_modify\n    @pytest.mark.parametrize('inData,repsData', get_excelData('2-课程模块', 47, 49, 6, 8))\n    def test_modify_lesson(self,inData,repsData):\n        res = LessonClass().modiycourse(self.session,inData)\n>       assert json.loads(res)['retcode'] == json.loads(repsData)['retcode']  # 断言\n\ntest_Lesson.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ng:\\program files (x86)\\python36-32\\lib\\json\\__init__.py:354: in loads\n    return _default_decoder.decode(s)\ng:\\program files (x86)\\python36-32\\lib\\json\\decoder.py:339: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x04275170>\ns = '<!DOCTYPE html>\\n<html lang=\"en\">\\n<head>\\n  <meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\">\\n  <...      display a standard page generated by the handler for this status code.\\n    </p>\\n  </div>\\n\\n</body>\\n</html>\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\ng:\\program files (x86)\\python36-32\\lib\\json\\decoder.py:357: JSONDecodeError"}, "parameters": [{"name": "inData", "value": "'{\"action\":\"modify_course\",\"id\":\"abc\",\"newdata\":\"{ \"name\":\"松勤\",\"desc\":\"心田老师课程\",\"display_idx\":\"5\"}\"\"\"}'"}, {"name": "repsData", "value": "'{\"retcode\": 500, \"reason\": \"Traceback (most recent call last):\n  File \"G:\\SQ资料区\\松勤自动化课程\\Web-API课程\\安装文件\\restapi-teach\\backend\\lib\\common.py\", line 69, in dispatch\n    return handler(request, *args, **kwargs)\n  File \"G:\\SQ资料区\\松勤自动化课程\\Web-API课程\\安装文件\\restapi-teach\\backend\\apps\\mgr\\handlers\\mgr.py\", line 198, in handle_modify_course\n    return  JsonResponse(Course.modify(request.param_dict['id'],newData))\n  File \"G:\\SQ资料区\\松勤自动化课程\\Web-API课程\\安装文件\\restapi-teach\\backend\\services\\datamodel\\common\\models.py\", line 100, in modify\n    Course.objects.filter(id=rid)\\\n  File \"E:\\Python3.6.4-Tool\\lib\\site-packages\\django\\db\\models\\manager.py\", line 82, in manager_method\n    return getattr(self.get_queryset(), name)(*args, **kwargs)\n  File \"E:\\Python3.6.4-Tool\\lib\\site-packages\\django\\db\\models\\query.py\", line 836, in filter\n    return self._filter_or_exclude(False, *args, **kwargs)\n  File \"E:\\Python3.6.4-Tool\\lib\\site-packages\\django\\db\\models\\query.py\", line 854, in _filter_or_exclude\n    clone.query.add_q(Q(*args, **kwargs))\n  File \"E:\\Python3.6.4-Tool\\lib\\site-packages\\django\\db\\models\\sql\\query.py\", line 1253, in add_q\n    clause, _ = self._add_q(q_object, self.used_aliases)\n  File \"E:\\Python3.6.4-Tool\\lib\\site-packages\\django\\db\\models\\sql\\query.py\", line 1277, in _add_q\n    split_subq=split_subq,\n  File \"E:\\Python3.6.4-Tool\\lib\\site-packages\\django\\db\\models\\sql\\query.py\", line 1215, in build_filter\n    condition = self.build_lookup(lookups, col, value)\n  File \"E:\\Python3.6.4-Tool\\lib\\site-packages\\django\\db\\models\\sql\\query.py\", line 1085, in build_lookup\n    lookup = lookup_class(lhs, rhs)\n  File \"E:\\Python3.6.4-Tool\\lib\\site-packages\\django\\db\\models\\lookups.py\", line 18, in __init__\n    self.rhs = self.get_prep_lookup()\n  File \"E:\\Python3.6.4-Tool\\lib\\site-packages\\django\\db\\models\\lookups.py\", line 68, in get_prep_lookup\n    return self.lhs.output_field.get_prep_value(self.rhs)\n  File \"E:\\Python3.6.4-Tool\\lib\\site-packages\\django\\db\\models\\fields\\__init__.py\", line 947, in get_prep_value\n    return int(value)\nValueError: invalid literal for int() with base 10: 'abc'\n\"}\n'"}], "start": 1605191856287, "stop": 1605191856330, "uuid": "46b7cf63-6e48-40ac-a0da-972b880b3a50", "historyId": "a989f512e7c0e32cb19ffd543e2356a3", "testCaseId": "85af6e5fb3122e6ae6b378964a75ea49", "fullName": "test_Lesson.TestLesson#test_modify_lesson[{\"action\":\"modify_course\",\"id\":\"abc\",\"newdata\":\"{ \"name\":\"松勤\",\"desc\":\"心田老师课程\",\"display_idx\":\"5\"}\"\"\"}-{\"retcode\": 500, \"reason\": \"Traceback (most recent call last):\n  File \"G:\\SQ资料区\\松勤自动化课程\\Web-API课程\\安装文件\\restapi-teach\\backend\\lib\\common.py\", line 69, in dispatch\n    return handler(request, *args, **kwargs)\n  File \"G:\\SQ资料区\\松勤自动化课程\\Web-API课程\\安装文件\\restapi-teach\\backend\\apps\\mgr\\handlers\\mgr.py\", line 198, in handle_modify_course\n    return  JsonResponse(Course.modify(request.param_dict", "labels": [{"name": "severity", "value": "normal"}, {"name": "feature", "value": "课程模块"}, {"name": "tag", "value": "Lesson(order=2)"}, {"name": "tag", "value": "lesson_modify"}, {"name": "suite", "value": "test_Lesson"}, {"name": "subSuite", "value": "TestLesson"}, {"name": "host", "value": "2Q7E3JCM2F8I91T"}, {"name": "thread", "value": "272-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_Lesson"}]}