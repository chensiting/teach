{
  "uid" : "d77af8c6689f3733",
  "name" : "修改课程用例",
  "fullName" : "test_Lesson.TestLesson#test_modify_lesson",
  "historyId" : "259ec117ef1a43c07dbac467e5de7992",
  "time" : {
    "start" : 1605192774723,
    "stop" : 1605192774764,
    "duration" : 41
  },
  "status" : "broken",
  "statusMessage" : "json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
  "statusTrace" : "self = <testCaseTeach.test_Lesson.TestLesson object at 0x03AB31B0>\ninData = '{\"action\":\"modify_course\",\"id\":100,\"newdata\":\"\"\"{ \"name\":\"松勤\",\"desc\":\"心田老师课程\",\"display_idx\":\"5\"}\"\"\"}'\nrepsData = '{\"retcode\": 0}'\n\n    @allure.story(\"修改课程\")\n    @allure.title(\"修改课程用例\")\n    @pytest.mark.lesson_modify\n    @pytest.mark.parametrize('inData,repsData', get_excelData('2-课程模块', 47, 49, 6, 8))\n    def test_modify_lesson(self,inData,repsData):\n        res = LessonClass().modiycourse(self.session,inData)\n>       assert json.loads(res)['retcode'] == json.loads(repsData)['retcode']  # 断言\n\ntest_Lesson.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ng:\\program files (x86)\\python36-32\\lib\\json\\__init__.py:354: in loads\n    return _default_decoder.decode(s)\ng:\\program files (x86)\\python36-32\\lib\\json\\decoder.py:339: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x035F5170>\ns = '<!DOCTYPE html>\\n<html lang=\"en\">\\n<head>\\n  <meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\">\\n  <...      display a standard page generated by the handler for this status code.\\n    </p>\\n  </div>\\n\\n</body>\\n</html>\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\ng:\\program files (x86)\\python36-32\\lib\\json\\decoder.py:357: JSONDecodeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "_Class__pytest_setup_class",
    "time" : {
      "start" : 1605192773174,
      "stop" : 1605192773511,
      "duration" : 337
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "delete_all_lesson",
    "time" : {
      "start" : 1605192772581,
      "stop" : 1605192773174,
      "duration" : 593
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "afterStages" : [ {
    "name" : "_Class__pytest_setup_class::0",
    "time" : {
      "start" : 1605192774999,
      "stop" : 1605192774999,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "delete_all_lesson::fin",
    "time" : {
      "start" : 1605192775001,
      "stop" : 1605192775001,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "labels" : [ {
    "name" : "severity",
    "value" : "normal"
  }, {
    "name" : "story",
    "value" : "修改课程"
  }, {
    "name" : "feature",
    "value" : "课程模块"
  }, {
    "name" : "tag",
    "value" : "Lesson(order=2)"
  }, {
    "name" : "tag",
    "value" : "lesson_modify"
  }, {
    "name" : "suite",
    "value" : "test_Lesson"
  }, {
    "name" : "subSuite",
    "value" : "TestLesson"
  }, {
    "name" : "host",
    "value" : "2Q7E3JCM2F8I91T"
  }, {
    "name" : "thread",
    "value" : "14208-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_Lesson"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "inData",
    "value" : "'{\"action\":\"modify_course\",\"id\":100,\"newdata\":\"\"\"{ \"name\":\"松勤\",\"desc\":\"心田老师课程\",\"display_idx\":\"5\"}\"\"\"}'"
  }, {
    "name" : "repsData",
    "value" : "'{\"retcode\": 0}'"
  } ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ "Lesson(order=2)", "lesson_modify" ]
  },
  "source" : "d77af8c6689f3733.json",
  "parameterValues" : [ "'{\"action\":\"modify_course\",\"id\":100,\"newdata\":\"\"\"{ \"name\":\"松勤\",\"desc\":\"心田老师课程\",\"display_idx\":\"5\"}\"\"\"}'", "'{\"retcode\": 0}'" ]
}